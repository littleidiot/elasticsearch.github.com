---
layout: guide
title: Configuration
cat: guide
sidebar: reference_setup
---

p. *elasticsearch* configuration files can be found under the @ES_HOME/config@ folder. The folder contains two files, the @elasticsearch.yml@ for configuring ElasticSearch for different "modules":../modules and @logging.yml@ for configuring ElasticSearch logging.

h1. Settings

The configuration format is "YAML":http://www.yaml.org/. Here is an example of changing the address that all network based modules will use to bind and publish to:

<pre class="prettyprint">
network :
    host : 10.0.0.4
</pre>

In production, you will almost certainly want to change the paths for data and log files:

<pre class="prettyprint">
path:
  logs: /var/log/elasticsearch
  data: /var/data/elasticsearch
</pre>

Also, don't forget to give your production cluster a name, which will be used to discover and auto-join other nodes:

<pre class="prettyprint">
cluster:
  name: <NAME OF YOUR CLUSTER>
</pre>

Internally, all settings are collapsed into "namespaced" settings. For example, the above will be collapsed into @network.host@. This means that it is easy to support other configuration formats, for example, "JSON":http://www.json.org. If JSON is a preferred configuration format, simply rename the @elasticsearch.yml@ file to @elasticsearch.json@ and add:

<pre class="prettyprint">
{
    "network" : {
        "host" : "10.0.0.4"
    }
}
</pre>

p. It also means that it is easy to provide the settings externally either using the @ES_JAVA_OPTS@ environment variable or as parameters to the @elasticsearch@ command, for example:

<pre class="prettyprint">
$ elasticsearch -f -Des.network.host=10.0.0.4
</pre>

p. Another option is to set the @es.default.@ prefix instead of @es.@ prefix, which means the default setting will be used only if not explicitly set in the configuration file.

p. A further option is to use the @${...}@ notation within the configuration file which will resolve to an environment setting, for example:

<pre class="prettyprint">
{
    "network" : {
        "host" : "${ES_NET_HOST}"
    }
}
</pre>


p. The location of the configuration file can be set externally using a system property:

<pre class="prettyprint">
$ elasticsearch -f -Des.config=/path/to/config/file
</pre>

h1. Index Settings

p. Indices created within the cluster can provide their own settings. For example, the following creates an index with memory based storage instead of the default file system based storage (the format can be either YAML or JSON):

<pre class="prettyprint">
$ curl -XPUT http://localhost:9200/kimchy/ -d \
'
index :
    store:
        type: memory
'
</pre>

p. Index level settings can be set at the node level as well, for example, within the @elasticsearch.yml@ file, the following can be set:

<pre class="prettyprint">
index :
    store:
        type: memory
</pre>

p. This means that every index that gets created on the specific node started with the aforementioned configuration will store the index in memory <b>unless the index explicitly sets it</b>. In other words, any index level settings override what is set in the node configuration. Of course, the above can also be set as a "collapsed" setting, for example:

<pre class="prettyprint">
$ elasticsearch -f -Des.index.store.type=memory
</pre>

p. All of the index level configuration can be found within each "index module":/guide/reference/index-modules.

h1. Logging

ElasticSearch uses an internal logging abstraction and comes, out of the box, with "log4j":http://logging.apache.org/log4j/. It tries to simplify log4j configuration by using "YAML":http://www.yaml.org/ to configure it, and the logging configuration file is @config/logging.yml@ file.

